{"version":3,"sources":["components/templete.js","store/actionCreator.js","components/homePage.js","App.js","store/reducer.js","serviceWorker.js","index.js","Netflix.jpg"],"names":["Templete","props","listName","list","eventhandler","class","map","item","key","id","title","src","img","alt","onClick","HomePage","this","loadData","mylist","recommendationList","RemoveHandler","AddHandler","className","logo","React","Component","connect","state","myList","dispatch","getState","axios","get","then","response","type","data","console","log","catch","error","actions","App","initState","reducer","action","recommendations","filter","movie","Boolean","window","location","hostname","match","store","createStore","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports"],"mappings":"gSAwBeA,MArBf,SAAmBC,GAAO,IAChBC,EAA8BD,EAA9BC,SAASC,EAAqBF,EAArBE,KAAKC,EAAgBH,EAAhBG,aAChB,OACI,6BACI,4BAAKF,GACL,wBAAKG,MAAM,aACLF,EAAKG,IAAI,SAAAC,GAAI,OACf,wBAAIF,MAAM,eAAeG,IAAKD,EAAKE,IAC/B,2BAAIF,EAAKG,OACT,yBAAKC,IAAKJ,EAAKK,IAAKC,IAAKN,EAAKG,QAC9B,4BAAQD,GAAIF,EAAKE,GAAIK,QAAS,kBAAIV,EAAaG,KAC5B,YAAXL,EAAqB,SAAS,a,wBCPvD,ICADa,E,4LAEEC,KAAKf,MAAMgB,a,+BAEN,IAAD,EACqDD,KAAKf,MAA3DiB,EADC,EACDA,OAAOC,EADN,EACMA,mBAAmBC,EADzB,EACyBA,cAAcC,EADvC,EACuCA,WAC/C,OACI,6BACI,yBAAMC,UAAU,OAAOX,IAAKY,IAAMV,IAAKU,MACvC,kBAAC,EAAD,CAAUrB,SAAS,UAAUC,KAAMe,EAAQd,aAAcgB,IACzD,kBAAC,EAAD,CAAUlB,SAAS,iBAAiBC,KAAMgB,EAAoBf,aAAciB,IAC5E,0CACA,4BACKH,EAAOZ,IAAI,SAAAC,GAAI,OAAE,wBAAIC,IAAKD,EAAKE,IAAKF,EAAKG,e,GAbnCc,IAAMC,WAuCdC,cAnBO,SAACC,GACnB,MAAO,CACHT,OAASS,EAAMC,OACfT,mBAAoBQ,EAAMR,qBAIT,SAACU,GACtB,MAAO,CACHZ,SAAU,WAAKY,ED5BZ,SAACA,EAASC,GACbC,IACOC,IAAI,mBACJC,KAAK,SAAAC,GACFL,EAVR,CACFM,KAAK,WACLC,KAQ2BF,EARjBE,OASAC,QAAQC,IAAIJ,KAEfK,MAAM,SAAAC,GACHH,QAAQC,IAAI,cCqBtBlB,cAAc,SAAAgB,GACV,OAAOP,EDZW,SAACO,GAC3B,MAAM,CACFD,KAAK,qBACLC,KAAKA,GCSeK,CAAyBL,KAE7Cf,WAAY,SAAAe,GACR,OAAOP,EDrBM,SAACO,GACtB,MAAO,CACHD,KAAK,gBACLC,KAAKA,GCkBeK,CAAoBL,OAKjCV,CAA4CX,GClC5C2B,MARf,WAEM,OACE,6BACE,kBAAC,EAAD,Q,mkBCPV,IAAMC,EAAU,CACZf,OAAO,GACPT,mBAAmB,IA0BRyB,EAxBD,WAA2B,IAA1BjB,EAAyB,uDAAnBgB,EAAUE,EAAS,uCACpC,OAAOA,EAAOV,MACV,IAAK,WACD,YACOR,EADP,CAEIC,OAAQiB,EAAOT,KAAKlB,OACpBC,mBAAoB0B,EAAOT,KAAKU,kBAExC,IAAK,gBACD,OAAO,EAAP,GACOnB,EADP,CAEIC,OAAO,GAAD,mBAAMD,EAAMC,QAAZ,CAAoBiB,EAAOT,OACjCjB,mBAAoBQ,EAAMR,mBAAmB4B,OAAO,SAAAC,GAAK,OAAEA,EAAMvC,KAAKoC,EAAOT,KAAK3B,OAE1F,IAAK,qBACD,OAAO,EAAP,GACOkB,EADP,CAEIC,OAAOD,EAAMC,OAAOmB,OAAO,SAAAC,GAAK,OAAEA,EAAMvC,KAAKoC,EAAOT,KAAK3B,KACzDU,mBAAmB,GAAD,mBAAKQ,EAAMR,oBAAX,CAA8B0B,EAAOT,SAE/D,QACI,OAAOT,I,eCdCsB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCRN,IAAMC,EAAOC,YAAYX,EAAQY,YAAgBC,MAEjDC,IAASC,OACT,kBAAC,IAAD,CAAUL,MAASA,GACf,kBAAC,EAAD,OACSM,SAASC,eAAe,SDkH/B,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM/B,KAAK,SAAAgC,GACjCA,EAAaC,gB,sCEnInBC,EAAOC,QAAU,IAA0B,sC","file":"static/js/main.b9078c3a.chunk.js","sourcesContent":["import React from 'react';\nimport '../App.css'\n\nfunction Templete (props){\n   const {listName,list,eventhandler} = props;\n        return(\n            <div>\n                <h2>{listName}</h2>\n                <ul  class=\"container\">\n                    { list.map(item=>(\n                    <li class=\"li-container\" key={item.id} >\n                        <p>{item.title}</p>\n                        <img src={item.img} alt={item.title}></img>\n                        <button id={item.id} onClick={()=>eventhandler(item)}>\n                               {listName===\"My List\"?\"remove\":\"add\"}\n                        </button>\n\n                    </li>)\n                    )}\n                </ul>\n            </div>\n        )\n                    \n}\nexport default Templete","import axios from 'axios'\nfunction gotData(res){\n    return{\n        type:\"GOT_DATA\",\n        data: res.data\n    }\n}\nexport const fetchData = () =>{\n    return (dispatch,getState) => {\n        axios\n              .get('/movieData.json')\n              .then(response=>{\n                  dispatch(gotData(response))\n                  console.log(response);\n              })\n              .catch(error=>{\n                  console.log('error');\n              }) \n    }\n}\nexport const addToMylist=(data)=>{\n    return {\n        type:'ADD_TO_MYLIST',\n        data:data\n    }\n}\nexport const removeFromMylist=(data)=>{\n    return{\n        type:'REMOVE_FROM_MYLIST',\n        data:data\n    }\n}","import React from 'react'\nimport logo from \"../../src/Netflix.jpg\"\nimport Templete from './templete';\nimport { connect } from 'react-redux';\nimport \"../App.css\";\nimport * as actions from '../store/actionCreator'\n\nclass HomePage extends React.Component{\n    componentDidMount(){\n        this.props.loadData();\n    }\n    render(){\n    const {mylist,recommendationList,RemoveHandler,AddHandler} = this.props\n    return (\n        <div>\n            <img  className='logo' src={logo} alt={logo}></img>\n            <Templete listName=\"My List\" list={mylist} eventhandler={RemoveHandler}></Templete>\n            <Templete listName=\"Recommendation\" list={recommendationList} eventhandler={AddHandler}></Templete>\n            <h2>movie List</h2>\n            <ul>\n                {mylist.map(item=><li key={item.id}>{item.title}</li>)}\n            </ul>\n        </div>\n    )\n    }\n}\n// transform the current Redux store state into props then can be passed to component\nconst mapStateToProps=(state)=>{\n    return {\n        mylist : state.myList,\n        recommendationList: state.recommendationList,\n    };\n};\n// return a callback function can be used in the component\nconst mapDispatchToProps=(dispatch)=>{\n    return {\n        loadData: ()=>{dispatch(actions.fetchData())},\n        RemoveHandler:data=>{\n            return dispatch(actions.removeFromMylist(data))\n        },\n        AddHandler: data=>{\n            return dispatch(actions.addToMylist(data));\n        }\n    };\n};\n\nexport default connect(mapStateToProps,mapDispatchToProps)(HomePage)","import React from 'react';\nimport HomePage from './components/homePage'\nimport './App.css';\n\nfunction  App (){\n   \n      return (\n        <div>\n          <HomePage/>\n        </div>\n      )\n  }\nexport default App","\nconst initState={\n    myList:[],\n    recommendationList:[]\n};\nconst reducer=(state=initState,action)=>{\n    switch(action.type){\n        case 'GOT_DATA':\n            return{\n                ...state,\n                myList: action.data.mylist,\n                recommendationList: action.data.recommendations\n            }\n        case 'ADD_TO_MYLIST':\n            return {\n                ...state,\n                myList: [...state.myList, action.data],\n                recommendationList: state.recommendationList.filter(movie=>movie.id!==action.data.id)\n            }\n        case 'REMOVE_FROM_MYLIST':\n            return {\n                ...state,\n                myList:state.myList.filter(movie=>movie.id!==action.data.id),\n                recommendationList:[...state.recommendationList,action.data]\n            }\n        default:\n            return state;   \n    }\n};\nexport default reducer","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { Provider } from 'react-redux';\nimport reducer from \"./store/reducer\";\nimport { createStore, applyMiddleware } from 'redux';\nimport thunk from \"redux-thunk\";\nimport * as serviceWorker from './serviceWorker';\n\nconst store =createStore(reducer,applyMiddleware(thunk))\n\nReactDOM.render(\n<Provider store = {store}>\n    <App />\n</Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/Netflix.47bc979c.jpg\";"],"sourceRoot":""}